pragma ever-solidity >= 0.6.0;

// Интерфейс контракта управления ячейками
interface IEverCell{
    struct cell{
        address owner;
        uint256 id;
        string content;
        uint256 password;
        bool isActive;
    }
    function createCell(string, string) external returns(uint256); // Функция создания новой ячейки и сохранение в нее информации
    function viewCell(uint256, string) external returns(string); // Функция просмотра ячейки
    function changeContent(uint256, string, string) external; // Функция изменения содержимого ячейки
    function changePassword(uint256 _id, string _password, string _newPassword) external; // Функция изменения пароля от ячейки
    function deleteCell(uint256, string) external; // Функция удаления ячейки
}

// Контракт управления ячейками
contract EverCell{

    // Структура ячейки
    struct cell{
        address owner; // Владелец ячейки
        uint256 id; // Номер ячейки
        string content; // Содержимое ячейки
        uint256 password; // Пароль от ячейки
        bool isOpen; // Статус ячейки
    }

    // Массив ячеек
    cell[] repository;
    
    constructor() public {
        require(tvm.pubkey() != 0, 101);
        require(msg.pubkey() == tvm.pubkey(), 102);
        tvm.accept();
    }

    // Функция создания новой ячейки и сохранение в нее информации
    function createCell(string _content, string _password)public returns(uint256){
        tvm.accept();
        repository.push(cell(msg.sender, repository.length, _content, tvm.hash(_password), true));
        return repository.length - 1; // Возвращается id новой ячейки
    }

    // Функция просмотра ячейки
    function viewCell(uint256 _id, string _password) public view returns(string){
        require(_id < repository.length, 100, "The number of cells is less than id"); // Проверка на существование номера ячейки
        require(repository[_id].isOpen, 101,"Cell deleted"); // Проверка на существование ячейки
        require(tvm.hash(_password) == repository[_id].password, 102, "Wrond password"); // Проверка на правильность пароля
        return repository[_id].content;
    }

    // Функция изменения содержимого ячейки
    function changeContent(uint256 _id, string _password, string _newContent) public{
        tvm.accept();
        require(_id < repository.length, 100, "The number of cells is less than id"); // Проверка на существование номера ячейки
        require(repository[_id].isOpen, 101,"Cell deleted"); // Проверка на существование ячейки
        require(msg.sender == repository[_id].owner, 103,"You aren`t the owner of cell"); // Проверка на владельца ячейки
        require(tvm.hash(_password) == repository[_id].password, 102, "Wrond password"); // Проверка на правильность пароля
        repository[_id].content = _newContent;
    }

    // Функция изменения пароля от ячейки
    function changePassword(uint256 _id, string _password, string _newPassword) public{
        tvm.accept();
        require(_id < repository.length, 100, "The number of cells is less than id"); // Проверка на существование номера ячейки
        require(repository[_id].isOpen, 101,"Cell deleted"); // Проверка на существование ячейки
        require(msg.sender == repository[_id].owner, 103,"You aren`t the owner of cell"); // Проверка на владельца ячейки
        require(tvm.hash(_password) == repository[_id].password, 102, "Wrond password"); // Проверка на правильность пароля
        repository[_id].password = tvm.hash(_newPassword);
    }

    // Функция удаления ячейки
    function deleteCell(uint256 _id, string _password) public{
        tvm.accept();
        require(_id < repository.length, 100, "The number of cells is less than id"); // Проверка на существование номера ячейки
        require(repository[_id].isOpen, 101,"Cell deleted"); // Проверка на существование ячейки            
        require(msg.sender == repository[_id].owner, 103,"You aren`t the owner of cell"); // Проверка на владельца ячейки
        require(tvm.hash(_password) == repository[_id].password, 102, "Wrond password"); // Проверка на правильность пароля   
        repository[_id].content = "";
        repository[_id].password = tvm.hash("");
        repository[_id].isOpen = false;
    }
}